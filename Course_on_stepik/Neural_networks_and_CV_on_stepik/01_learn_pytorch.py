# -*- coding: utf-8 -*-
"""01_learn_pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eTCAD4JUAYn6sniMfi0S5IqohOm5zFZb
"""

import torch
import numpy as np

torch.__version__

torch.zeros([3, 4])

torch.ones([3, 4, 3])

torch.Tensor([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])

x = torch.Tensor([[1, 2, 3, 4],
                  [5, 6, 7, 8],
                  [9, 10, 11, 12]])

x.shape

x[0]

x[1]

x[0, 0]

x[:, 0]

x + 10

x ** 2

y = torch.Tensor([[12, 11, 10, 9],
                  [8, 7, 6, 5],
                  [4, 3, 2, 1]])

x + y

x * y

x / y

x % y

torch.exp(x)

torch.log(x)

torch.sin(x)

x > 3

mask = x > 3

x[mask]

x[x > 3]

y = x
y[0, 0] = 999
print(x)
print(y)

x = torch.Tensor([[1, 2, 3, 4],
                  [5, 6, 7, 8],
                  [9, 10, 11, 12]])

y = x.clone()
y[0, 0] = 999
print(x)
print(y)

x.dtype

x = x.double()
print(x)
x = x.int()
print(x)
x = x.float()
print(x)

x = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8]])

x

x = torch.from_numpy(x)
x

x = x.numpy()
x

x = torch.rand([2000, 3000])
# x

torch.cuda.is_available()

torch.device('cuda:0')

torch.device('cpu')

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
device

x_cuda = x.to(device)
# x_cuda

# Commented out IPython magic to ensure Python compatibility.
# %time y = (x - x + x * 10.0) ** 2

# Commented out IPython magic to ensure Python compatibility.
# %time y_cuda = (x_cuda - x_cuda + 10.0) ** 2

